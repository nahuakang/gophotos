package models

import (
	"errors"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
)

var (
	// ErrNotFound is returned when a resource cannot be found
	// in the database.
	ErrNotFound = errors.New("models: resource not found")
	// ErrInvalidID is returned when an invalid ID is provided
	// to a method such as Delete.
	ErrInvalidID = errors.New("models: ID provided is invalid")
)

// NewUserService returns a pointer to UserService
func NewUserService(connectionInfo string) (*UserService, error) {
	db, err := gorm.Open("postgres", connectionInfo)
	if err != nil {
		return nil, err
	}

	db.LogMode(true)

	return &UserService{
		db: db,
	}, nil
}

// User represents a user data type
type User struct {
	gorm.Model
	Name  string
	Email string `gorm:"not null;unique_index"`
}

// UserService is an abstract layer to interact with gorm.DB
type UserService struct {
	db *gorm.DB
}

// Create will create the provided user and backfill data
// like the ID, CreateAt, and UpdateAt fields.
func (us *UserService) Create(user *User) error {
	return us.db.Create(user).Error
}

// Update updates the provided user with the data provided.
func (us *UserService) Update(user *User) error {
	return us.db.Save(user).Error
}

// Delete deletes the user with the provided ID
func (us *UserService) Delete(id uint) error {
	// If no ID is provided
	if id == 0 {
		return ErrInvalidID
	}
	user := User{Model: gorm.Model{ID: id}}
	return us.db.Delete(&user).Error
}

// ByID looks up a user with the provided ID.
// If the user is found, nil error is returned.
// If the user is not found, ErrNotFound is returned.
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should result
// in a 500 error.
func (us *UserService) ByID(id uint) (*User, error) {
	var user User
	db := us.db.Where("id = ?", id)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// ByEmail looks up a user with the given email address and
// returns the user.
// If the user is found, nil is returned as error.
// If the user is not found, ErrNotFound is returned.
// If there is another error, the error is returned with
// more information on what went wrong.
func (us *UserService) ByEmail(email string) (*User, error) {
	var user User
	db := us.db.Where("email = ?", email)
	err := first(db, &user)
	return &user, err
}

// DestructiveReset drops the user table and rebuilds it
func (us *UserService) DestructiveReset() {
	us.db.DropTableIfExists(&User{})
	us.db.AutoMigrate(&User{})
}

// Close closes UserService database connection
func (us *UserService) Close() error {
	return us.db.Close()
}

// first will query using the provided gorm.DB and it returns
// the first item returned and place it into dst. If nothing
// is found in the query, the method returns ErrNotFound
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}
