package models

import (
	"errors"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"golang.org/x/crypto/bcrypt"
)

var (
	// ErrNotFound is returned when a resource cannot be found
	// in the database.
	ErrNotFound = errors.New("models: resource not found")
	// ErrInvalidID is returned when an invalid ID is provided
	// to a method such as Delete.
	ErrInvalidID       = errors.New("models: ID provided is invalid")
	ErrInvalidPassword = errors.New("models: incorrect password provided")
	userPasswordPepper = "secret-random-string"
)

// NewUserService returns a pointer to UserService
func NewUserService(connectionInfo string) (*UserService, error) {
	db, err := gorm.Open("postgres", connectionInfo)
	if err != nil {
		return nil, err
	}

	db.LogMode(true)

	return &UserService{
		db: db,
	}, nil
}

// User represents a user data type
type User struct {
	gorm.Model
	Name         string
	Email        string `gorm:"not null;unique_index"`
	Password     string `gorm:"-"`
	PasswordHash string `gorm:"not null"`
}

// UserService is an abstract layer to interact with gorm.DB
type UserService struct {
	db *gorm.DB
}

// Create will create the provided user and backfill data
// like the ID, CreateAt, and UpdateAt fields.
func (us *UserService) Create(user *User) error {
	// Add pepper to user password
	passwordBytes := []byte(user.Password + userPasswordPepper)

	hashedBytes, err := bcrypt.GenerateFromPassword(
		passwordBytes, bcrypt.DefaultCost,
	)
	if err != nil {
		return err
	}

	user.PasswordHash = string(hashedBytes)
	user.Password = "" // Clear reference to cleartext password after hashing

	return us.db.Create(user).Error
}

// Authenticate authenticates a user with the provided email and password.
// If the email address provided is invalid, return nil, ErrNotFound
// If the password provided is invalid, return nil, ErrInvalidPassword
// If the email and the password are both valid, return user, nil
// Otherwise, return nil, error
func (us *UserService) Authenticate(email, password string) (*User, error) {
	foundUser, err := us.ByEmail(email)
	if err != nil {
		return nil, err
	}

	err = bcrypt.CompareHashAndPassword(
		[]byte(foundUser.PasswordHash),
		[]byte(password+userPasswordPepper),
	)

	switch err {
	case nil:
		return foundUser, nil
	case bcrypt.ErrMismatchedHashAndPassword:
		return nil, ErrInvalidPassword
	default:
		return nil, err
	}
}

// Update updates the provided user with the data provided.
func (us *UserService) Update(user *User) error {
	return us.db.Save(user).Error
}

// Delete deletes the user with the provided ID
func (us *UserService) Delete(id uint) error {
	// If no ID is provided
	if id == 0 {
		return ErrInvalidID
	}
	user := User{Model: gorm.Model{ID: id}}
	return us.db.Delete(&user).Error
}

// ByID looks up a user with the provided ID.
// If the user is found, nil error is returned.
// If the user is not found, ErrNotFound is returned.
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should result
// in a 500 error.
func (us *UserService) ByID(id uint) (*User, error) {
	var user User
	db := us.db.Where("id = ?", id)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// ByEmail looks up a user with the given email address and
// returns the user.
// If the user is found, nil is returned as error.
// If the user is not found, ErrNotFound is returned.
// If there is another error, the error is returned with
// more information on what went wrong.
func (us *UserService) ByEmail(email string) (*User, error) {
	var user User
	db := us.db.Where("email = ?", email)
	err := first(db, &user)
	return &user, err
}

// DestructiveReset drops the user table and rebuilds it
func (us *UserService) DestructiveReset() error {
	err := us.db.DropTableIfExists(&User{}).Error
	if err != nil {
		return err
	}
	return us.AutoMigrate()
}

// AutoMigrate will attempt to automatically migrate user table
func (us *UserService) AutoMigrate() error {
	if err := us.db.AutoMigrate(&User{}).Error; err != nil {
		return err
	}

	return nil
}

// Close closes UserService database connection
func (us *UserService) Close() error {
	return us.db.Close()
}

// first will query using the provided gorm.DB and it returns
// the first item returned and place it into dst. If nothing
// is found in the query, the method returns ErrNotFound
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}
